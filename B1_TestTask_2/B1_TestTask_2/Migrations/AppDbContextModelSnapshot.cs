// <auto-generated />
using B1_TestTask_2.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B1_TestTask_2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("B1_TestTask_2.Models.AccountDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("ActiveClosingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ActiveOpeningBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DebitTurnover")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("LoanTurnover")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PassiveClosingBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PassiveOpeningBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.AccountGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("ClassId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Classes", b =>
                {
                    b.Property<int>("ClassNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassNumber"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("ClassNumber");

                    b.HasIndex("FileId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.AccountDetails", b =>
                {
                    b.HasOne("B1_TestTask_2.Models.Accounts", "Account")
                        .WithOne("AccountDetails")
                        .HasForeignKey("B1_TestTask_2.Models.AccountDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Accounts", b =>
                {
                    b.HasOne("B1_TestTask_2.Models.AccountGroups", "AccountGroups")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("B1_TestTask_2.Models.Classes", "Class")
                        .WithMany("Accounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountGroups");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Classes", b =>
                {
                    b.HasOne("B1_TestTask_2.Models.Files", "File")
                        .WithMany("Classes")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.AccountGroups", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Accounts", b =>
                {
                    b.Navigation("AccountDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Classes", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("B1_TestTask_2.Models.Files", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
